
Verlichting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021c  0080201c  0080201c  00000bd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006cc9  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003895  00000000  00000000  00007b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001580  00000000  00000000  0000b3ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  0000c96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b71  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d84  00000000  00000000  00010be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0001296d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 e2       	ldi	r30, 0x22	; 34
 214:	fb e0       	ldi	r31, 0x0B	; 11
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ac 31       	cpi	r26, 0x1C	; 28
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	22 e2       	ldi	r18, 0x22	; 34
 228:	ac e1       	ldi	r26, 0x1C	; 28
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a8 33       	cpi	r26, 0x38	; 56
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 8a 02 	call	0x514	; 0x514 <main>
 23a:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <init>:
* From: https://www.arduino.cc/reference/en/language/functions/math/map/
*/
uint8_t map(long x, long in_min, long in_max, long out_min, long out_max) 
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	00 e2       	ldi	r16, 0x20	; 32
 24c:	16 e0       	ldi	r17, 0x06	; 6
 24e:	8c e3       	ldi	r24, 0x3C	; 60
 250:	f8 01       	movw	r30, r16
 252:	82 83       	std	Z+2, r24	; 0x02
 254:	c0 e1       	ldi	r28, 0x10	; 16
 256:	c5 8b       	std	Z+21, r28	; 0x15
 258:	c4 8b       	std	Z+20, r28	; 0x14
 25a:	c3 8b       	std	Z+19, r28	; 0x13
 25c:	c2 8b       	std	Z+18, r28	; 0x12
 25e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <nrfspiInit>
 262:	0e 94 e5 04 	call	0x9ca	; 0x9ca <nrfBegin>
 266:	68 e0       	ldi	r22, 0x08	; 8
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <nrfSetRetries>
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	0e 94 a9 04 	call	0x952	; 0x952 <nrfSetPALevel>
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	0e 94 b7 04 	call	0x96e	; 0x96e <nrfSetDataRate>
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	0e 94 cd 04 	call	0x99a	; 0x99a <nrfSetCRCLength>
 280:	80 e2       	ldi	r24, 0x20	; 32
 282:	0e 94 91 04 	call	0x922	; 0x922 <nrfSetChannel>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 9d 04 	call	0x93a	; 0x93a <nrfSetAutoAck>
 28c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <nrfEnableDynamicPayloads>
 290:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <nrfClearInterruptBits>
 294:	0e 94 93 03 	call	0x726	; 0x726 <nrfFlushRx>
 298:	0e 94 a2 03 	call	0x744	; 0x744 <nrfFlushTx>
 29c:	e0 ea       	ldi	r30, 0xA0	; 160
 29e:	f6 e0       	ldi	r31, 0x06	; 6
 2a0:	82 85       	ldd	r24, Z+10	; 0x0a
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	82 87       	std	Z+10, r24	; 0x0a
 2a6:	d2 e0       	ldi	r29, 0x02	; 2
 2a8:	d6 8b       	std	Z+22, r29	; 0x16
 2aa:	81 85       	ldd	r24, Z+9	; 0x09
 2ac:	8c 7f       	andi	r24, 0xFC	; 252
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	81 87       	std	Z+9, r24	; 0x09
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	70 e2       	ldi	r23, 0x20	; 32
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 04 04 	call	0x808	; 0x808 <nrfOpenReadingPipe>
 2bc:	0e 94 b1 03 	call	0x762	; 0x762 <nrfStartListening>
 2c0:	d0 93 02 06 	sts	0x0602, r29	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
 2c4:	e0 e0       	ldi	r30, 0x00	; 0
 2c6:	f2 e0       	ldi	r31, 0x02	; 2
 2c8:	28 e0       	ldi	r18, 0x08	; 8
 2ca:	21 a3       	std	Z+33, r18	; 0x21
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 a3       	std	Z+32, r24	; 0x20
 2d0:	c2 83       	std	Z+2, r28	; 0x02
 2d2:	11 82       	std	Z+1, r1	; 0x01
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	94 83       	std	Z+4, r25	; 0x04
 2d8:	80 83       	st	Z, r24
 2da:	f8 01       	movw	r30, r16
 2dc:	d2 83       	std	Z+2, r29	; 0x02
 2de:	e0 e4       	ldi	r30, 0x40	; 64
 2e0:	f2 e0       	ldi	r31, 0x02	; 2
 2e2:	21 a3       	std	Z+33, r18	; 0x21
 2e4:	80 a3       	std	Z+32, r24	; 0x20
 2e6:	c2 83       	std	Z+2, r28	; 0x02
 2e8:	11 82       	std	Z+1, r1	; 0x01
 2ea:	94 83       	std	Z+4, r25	; 0x04
 2ec:	80 83       	st	Z, r24
 2ee:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
 2f2:	e0 e0       	ldi	r30, 0x00	; 0
 2f4:	f9 e0       	ldi	r31, 0x09	; 9
 2f6:	83 e1       	ldi	r24, 0x13	; 19
 2f8:	81 83       	std	Z+1, r24	; 0x01
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 83       	st	Z, r24
 2fe:	8f e0       	ldi	r24, 0x0F	; 15
 300:	97 e2       	ldi	r25, 0x27	; 39
 302:	86 a3       	std	Z+38, r24	; 0x26
 304:	97 a3       	std	Z+39, r25	; 0x27
 306:	10 a6       	std	Z+40, r1	; 0x28
 308:	11 a6       	std	Z+41, r1	; 0x29
 30a:	e0 ea       	ldi	r30, 0xA0	; 160
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	82 81       	ldd	r24, Z+2	; 0x02
 310:	81 60       	ori	r24, 0x01	; 1
 312:	82 83       	std	Z+2, r24	; 0x02
 314:	78 94       	sei
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <read_sensor>:
*/
uint16_t read_sensor(void)
{
	uint16_t res;

	ADCA.CH0.CTRL |= ADC_CH_START_bm;								//Start ADC conversion
 320:	e0 e0       	ldi	r30, 0x00	; 0
 322:	f2 e0       	ldi	r31, 0x02	; 2
 324:	80 a1       	ldd	r24, Z+32	; 0x20
 326:	80 68       	ori	r24, 0x80	; 128
 328:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCA.CH0.INTFLAGS));									//Wait for conversion to finish
 32a:	83 a1       	ldd	r24, Z+35	; 0x23
 32c:	88 23       	and	r24, r24
 32e:	e9 f3       	breq	.-6      	; 0x32a <read_sensor+0xa>
	res = ADCA.CH0.RES;												//Store result in res
 330:	e0 e0       	ldi	r30, 0x00	; 0
 332:	f2 e0       	ldi	r31, 0x02	; 2
 334:	24 a1       	ldd	r18, Z+36	; 0x24
 336:	35 a1       	ldd	r19, Z+37	; 0x25
	ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;							//Reset interrupt register
 338:	93 a1       	ldd	r25, Z+35	; 0x23
 33a:	91 60       	ori	r25, 0x01	; 1
 33c:	93 a3       	std	Z+35, r25	; 0x23
	
	return res;
}
 33e:	c9 01       	movw	r24, r18
 340:	08 95       	ret

00000342 <lamp_with_sensor>:
*
* \return				void
*/
void lamp_with_sensor()
{
	int value = read_sensor();
 342:	0e 94 90 01 	call	0x320	; 0x320 <read_sensor>
	if(value < BOUND - UPPER){
 346:	8c 36       	cpi	r24, 0x6C	; 108
 348:	27 e0       	ldi	r18, 0x07	; 7
 34a:	92 07       	cpc	r25, r18
 34c:	ec f4       	brge	.+58     	; 0x388 <lamp_with_sensor+0x46>
		lamp += STEP;
 34e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <lamp>
 352:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <lamp+0x1>
 356:	0a 96       	adiw	r24, 0x0a	; 10
		if(lamp > 9999)
 358:	80 31       	cpi	r24, 0x10	; 16
 35a:	27 e2       	ldi	r18, 0x27	; 39
 35c:	92 07       	cpc	r25, r18
 35e:	2c f4       	brge	.+10     	; 0x36a <lamp_with_sensor+0x28>
*/
void lamp_with_sensor()
{
	int value = read_sensor();
	if(value < BOUND - UPPER){
		lamp += STEP;
 360:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <lamp>
 364:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <lamp+0x1>
 368:	06 c0       	rjmp	.+12     	; 0x376 <lamp_with_sensor+0x34>
		if(lamp > 9999)
		{
			lamp = 9999;
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	97 e2       	ldi	r25, 0x27	; 39
 36e:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <lamp>
 372:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <lamp+0x1>
		}
		TCD0.CCA = lamp;
 376:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <lamp>
 37a:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <lamp+0x1>
 37e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
 382:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
 386:	08 95       	ret
	}
	else if(value > BOUND + UPPER)
 388:	85 33       	cpi	r24, 0x35	; 53
 38a:	98 40       	sbci	r25, 0x08	; 8
 38c:	bc f0       	brlt	.+46     	; 0x3bc <lamp_with_sensor+0x7a>
	{
		lamp -= STEP;
 38e:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <lamp>
 392:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <lamp+0x1>
 396:	0a 97       	sbiw	r24, 0x0a	; 10
		if(lamp < 0)
 398:	2a f0       	brmi	.+10     	; 0x3a4 <lamp_with_sensor+0x62>
		}
		TCD0.CCA = lamp;
	}
	else if(value > BOUND + UPPER)
	{
		lamp -= STEP;
 39a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <lamp>
 39e:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <lamp+0x1>
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <lamp_with_sensor+0x6a>
		if(lamp < 0)
		{
			lamp = 0;
 3a4:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <lamp>
 3a8:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <lamp+0x1>
		}
		TCD0.CCA = lamp;
 3ac:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <lamp>
 3b0:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <lamp+0x1>
 3b4:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
 3b8:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
 3bc:	08 95       	ret

000003be <read_pot>:
*/
uint16_t read_pot(void)
{
	uint16_t res;
	
	ADCB.CH0.CTRL |= ADC_CH_START_bm;								//Start ADC conversion
 3be:	e0 e4       	ldi	r30, 0x40	; 64
 3c0:	f2 e0       	ldi	r31, 0x02	; 2
 3c2:	80 a1       	ldd	r24, Z+32	; 0x20
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCB.CH0.INTFLAGS));									//Wait for conversion to finish
 3c8:	83 a1       	ldd	r24, Z+35	; 0x23
 3ca:	88 23       	and	r24, r24
 3cc:	e9 f3       	breq	.-6      	; 0x3c8 <read_pot+0xa>
	res = ADCB.CH0.RES;												//Store result in res
 3ce:	e0 e4       	ldi	r30, 0x40	; 64
 3d0:	f2 e0       	ldi	r31, 0x02	; 2
 3d2:	24 a1       	ldd	r18, Z+36	; 0x24
 3d4:	35 a1       	ldd	r19, Z+37	; 0x25
	ADCB.CH0.INTFLAGS |= ADC_CH_CHIF_bm;							//Reset interrupt register
 3d6:	93 a1       	ldd	r25, Z+35	; 0x23
 3d8:	91 60       	ori	r25, 0x01	; 1
 3da:	93 a3       	std	Z+35, r25	; 0x23
	
	return res;
}
 3dc:	c9 01       	movw	r24, r18
 3de:	08 95       	ret

000003e0 <average_pot>:
*
* \return				void
*/
uint16_t average_pot(void)
{
	uint16_t value = read_pot();
 3e0:	0e 94 df 01 	call	0x3be	; 0x3be <read_pot>
	uint16_t sum = 0;
	
	if(indexArray >= POT_SIZE)
 3e4:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__data_end>
 3e8:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__data_end+0x1>
 3ec:	2a 30       	cpi	r18, 0x0A	; 10
 3ee:	31 05       	cpc	r19, r1
 3f0:	24 f0       	brlt	.+8      	; 0x3fa <average_pot+0x1a>
	{
		indexArray = 0;
 3f2:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <__data_end>
 3f6:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <__data_end+0x1>
	}
	
	potArray[indexArray] = value;
 3fa:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__data_end>
 3fe:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__data_end+0x1>
 402:	f9 01       	movw	r30, r18
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	ec 5d       	subi	r30, 0xDC	; 220
 40a:	fd 4d       	sbci	r31, 0xDD	; 221
 40c:	80 83       	st	Z, r24
 40e:	91 83       	std	Z+1, r25	; 0x01
	indexArray++;
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	20 93 1c 20 	sts	0x201C, r18	; 0x80201c <__data_end>
 418:	30 93 1d 20 	sts	0x201D, r19	; 0x80201d <__data_end+0x1>
 41c:	e4 e2       	ldi	r30, 0x24	; 36
 41e:	f2 e2       	ldi	r31, 0x22	; 34
 420:	48 e3       	ldi	r20, 0x38	; 56
 422:	52 e2       	ldi	r21, 0x22	; 34
* \return				void
*/
uint16_t average_pot(void)
{
	uint16_t value = read_pot();
	uint16_t sum = 0;
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
	potArray[indexArray] = value;
	indexArray++;
	
	for(int x = 0; x < POT_SIZE; x++)
	{
		sum += potArray[x];
 428:	81 91       	ld	r24, Z+
 42a:	91 91       	ld	r25, Z+
 42c:	28 0f       	add	r18, r24
 42e:	39 1f       	adc	r19, r25
	}
	
	potArray[indexArray] = value;
	indexArray++;
	
	for(int x = 0; x < POT_SIZE; x++)
 430:	e4 17       	cp	r30, r20
 432:	f5 07       	cpc	r31, r21
 434:	c9 f7       	brne	.-14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		sum += potArray[x];
	}
	
	return sum/POT_SIZE;
 436:	ad ec       	ldi	r26, 0xCD	; 205
 438:	bc ec       	ldi	r27, 0xCC	; 204
 43a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__umulhisi3>
}
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	08 95       	ret

0000044c <lamp_with_pot>:
*
* \return				void
*/
void lamp_with_pot(void)
{
	uint16_t value = average_pot();
 44c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <average_pot>
	TCD0.CCA = map(value, 0, 4095, 0 , 9999);
 450:	9c 01       	movw	r18, r24
 452:	af e0       	ldi	r26, 0x0F	; 15
 454:	b7 e2       	ldi	r27, 0x27	; 39
 456:	0e 94 55 05 	call	0xaaa	; 0xaaa <__umulhisi3>
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	3f e0       	ldi	r19, 0x0F	; 15
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	0e 94 36 05 	call	0xa6c	; 0xa6c <__divmodsi4>
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	20 93 28 09 	sts	0x0928, r18	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
 46c:	30 93 29 09 	sts	0x0929, r19	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
 470:	08 95       	ret

00000472 <run_state>:
*
* \return				void
*/
void run_state(void)
{
	switch(state)
 472:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 476:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	91 05       	cpc	r25, r1
 47e:	69 f0       	breq	.+26     	; 0x49a <run_state+0x28>
 480:	1c f4       	brge	.+6      	; 0x488 <run_state+0x16>
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	39 f0       	breq	.+14     	; 0x494 <run_state+0x22>
 486:	08 95       	ret
 488:	83 30       	cpi	r24, 0x03	; 3
 48a:	91 05       	cpc	r25, r1
 48c:	49 f0       	breq	.+18     	; 0x4a0 <run_state+0x2e>
 48e:	04 97       	sbiw	r24, 0x04	; 4
 490:	71 f0       	breq	.+28     	; 0x4ae <run_state+0x3c>
 492:	08 95       	ret
	{
		case 1:
			lamp_with_sensor();
 494:	0e 94 a1 01 	call	0x342	; 0x342 <lamp_with_sensor>
			break;
 498:	08 95       	ret
		case 2:
			lamp_with_pot();
 49a:	0e 94 26 02 	call	0x44c	; 0x44c <lamp_with_pot>
			break;
 49e:	08 95       	ret
*
* \return				void
*/
void lamp_on(void)
{
	TCD0.CCA = 9999;
 4a0:	8f e0       	ldi	r24, 0x0F	; 15
 4a2:	97 e2       	ldi	r25, 0x27	; 39
 4a4:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
 4a8:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
 4ac:	08 95       	ret
*
* \return				void
*/
void lamp_off(void)
{
	TCD0.CCA = 0;
 4ae:	10 92 28 09 	sts	0x0928, r1	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
 4b2:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
 4b6:	08 95       	ret

000004b8 <set_state>:
*
* \return				void
*/
void set_state(void)
{
	if(PORTB.IN & PIN2_bm)
 4b8:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
 4bc:	82 ff       	sbrs	r24, 2
 4be:	07 c0       	rjmp	.+14     	; 0x4ce <set_state+0x16>
	{
		state = 1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 4c8:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 4cc:	20 c0       	rjmp	.+64     	; 0x50e <set_state+0x56>
	}
	else if(PORTB.IN & PIN3_bm)
 4ce:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
 4d2:	83 ff       	sbrs	r24, 3
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <set_state+0x2c>
	{
		state = 2;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 4de:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 4e2:	15 c0       	rjmp	.+42     	; 0x50e <set_state+0x56>
	}
	else if(PORTB.IN & PIN4_bm)
 4e4:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
 4e8:	84 ff       	sbrs	r24, 4
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <set_state+0x42>
	{
		state = 3;
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 4f4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 4f8:	0a c0       	rjmp	.+20     	; 0x50e <set_state+0x56>
	}
	else if(PORTB.IN & PIN5_bm)
 4fa:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
 4fe:	85 ff       	sbrs	r24, 5
 500:	06 c0       	rjmp	.+12     	; 0x50e <set_state+0x56>
	{
		state = 4;
 502:	84 e0       	ldi	r24, 0x04	; 4
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 50a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
	}
	run_state();
 50e:	0e 94 39 02 	call	0x472	; 0x472 <run_state>
 512:	08 95       	ret

00000514 <main>:
int potArray[POT_SIZE];
int buffer[BUFFER_SIZE];

int main(void)
{
	init();
 514:	0e 94 21 01 	call	0x242	; 0x242 <init>
	while (1) 
	{
		set_state();
 518:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <set_state>
 51c:	fd cf       	rjmp	.-6      	; 0x518 <main+0x4>

0000051e <__vector_104>:
}

/*!Brief Interrupt that triggers when a messages is received
*/
ISR(PORTF_INT0_vect)
{
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	0b b6       	in	r0, 0x3b	; 59
 52a:	0f 92       	push	r0
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	00 d0       	rcall	.+0      	; 0x54a <__vector_104+0x2c>
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
	uint8_t tx_ds, max_rt, rx_dr;
	
	nrfWhatHappened(&tx_ds, &max_rt, &rx_dr);						//Check what happened
 54e:	ae 01       	movw	r20, r28
 550:	4d 5f       	subi	r20, 0xFD	; 253
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	be 01       	movw	r22, r28
 556:	6e 5f       	subi	r22, 0xFE	; 254
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	ce 01       	movw	r24, r28
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <nrfWhatHappened>
	
	if(rx_dr)														//messages received correctly
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	88 23       	and	r24, r24
 566:	89 f0       	breq	.+34     	; 0x58a <__vector_104+0x6c>
	{																
		nrfRead(buffer, nrfGetDynamicPayloadSize());				//read first byte
 568:	0e 94 7f 04 	call	0x8fe	; 0x8fe <nrfGetDynamicPayloadSize>
 56c:	68 2f       	mov	r22, r24
 56e:	86 e2       	ldi	r24, 0x26	; 38
 570:	90 e2       	ldi	r25, 0x20	; 32
 572:	0e 94 8c 03 	call	0x718	; 0x718 <nrfRead>
		uint8_t res = buffer[0];									//store first byte				
		if(res == 'c')												//Store is 'c'
 576:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <buffer>
 57a:	83 36       	cpi	r24, 0x63	; 99
 57c:	31 f4       	brne	.+12     	; 0x58a <__vector_104+0x6c>
		{															
			state = 3;												//Lamp on
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 586:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
	}
 58a:	23 96       	adiw	r28, 0x03	; 3
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	de bf       	out	0x3e, r29	; 62
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0b be       	out	0x3b, r0	; 59
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	c0 ea       	ldi	r28, 0xA0	; 160
 5c2:	d6 e0       	ldi	r29, 0x06	; 6
 5c4:	10 e2       	ldi	r17, 0x20	; 32
 5c6:	1e 83       	std	Y+6, r17	; 0x06
 5c8:	8f 71       	andi	r24, 0x1F	; 31
 5ca:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 5d4:	1d 83       	std	Y+5, r17	; 0x05
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	08 95       	ret

000005de <nrfWriteRegisterMulti>:
 5de:	df 92       	push	r13
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	7b 01       	movw	r14, r22
 5ee:	c4 2f       	mov	r28, r20
 5f0:	90 e2       	ldi	r25, 0x20	; 32
 5f2:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 5f6:	8f 71       	andi	r24, 0x1F	; 31
 5f8:	80 62       	ori	r24, 0x20	; 32
 5fa:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 5fe:	d8 2e       	mov	r13, r24
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	8c 0f       	add	r24, r28
 604:	cc 23       	and	r28, r28
 606:	69 f0       	breq	.+26     	; 0x622 <nrfWriteRegisterMulti+0x44>
 608:	e7 01       	movw	r28, r14
 60a:	08 2f       	mov	r16, r24
 60c:	10 e0       	ldi	r17, 0x00	; 0
 60e:	0f 5f       	subi	r16, 0xFF	; 255
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	0e 0d       	add	r16, r14
 614:	1f 1d       	adc	r17, r15
 616:	89 91       	ld	r24, Y+
 618:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 61c:	c0 17       	cp	r28, r16
 61e:	d1 07       	cpc	r29, r17
 620:	d1 f7       	brne	.-12     	; 0x616 <nrfWriteRegisterMulti+0x38>
 622:	80 e2       	ldi	r24, 0x20	; 32
 624:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 628:	8d 2d       	mov	r24, r13
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	08 95       	ret

0000063a <nrfWriteRegister>:
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	f6 2e       	mov	r15, r22
 646:	c0 ea       	ldi	r28, 0xA0	; 160
 648:	d6 e0       	ldi	r29, 0x06	; 6
 64a:	10 e2       	ldi	r17, 0x20	; 32
 64c:	1e 83       	std	Y+6, r17	; 0x06
 64e:	8f 71       	andi	r24, 0x1F	; 31
 650:	80 62       	ori	r24, 0x20	; 32
 652:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 656:	08 2f       	mov	r16, r24
 658:	8f 2d       	mov	r24, r15
 65a:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 65e:	1d 83       	std	Y+5, r17	; 0x05
 660:	80 2f       	mov	r24, r16
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	08 95       	ret

0000066e <nrfReadPayload>:
 66e:	bf 92       	push	r11
 670:	cf 92       	push	r12
 672:	df 92       	push	r13
 674:	ef 92       	push	r14
 676:	ff 92       	push	r15
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	6c 01       	movw	r12, r24
 682:	c0 91 08 20 	lds	r28, 0x2008	; 0x802008 <fixed_payload_size>
 686:	1c 2f       	mov	r17, r28
 688:	6c 17       	cp	r22, r28
 68a:	08 f4       	brcc	.+2      	; 0x68e <nrfReadPayload+0x20>
 68c:	16 2f       	mov	r17, r22
 68e:	80 91 25 20 	lds	r24, 0x2025	; 0x802025 <dynamic_payloads_enabled>
 692:	81 11       	cpse	r24, r1
 694:	27 c0       	rjmp	.+78     	; 0x6e4 <nrfReadPayload+0x76>
 696:	0c 2f       	mov	r16, r28
 698:	01 1b       	sub	r16, r17
 69a:	80 e2       	ldi	r24, 0x20	; 32
 69c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 6a0:	81 e6       	ldi	r24, 0x61	; 97
 6a2:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 6a6:	b8 2e       	mov	r11, r24
 6a8:	ee 24       	eor	r14, r14
 6aa:	ea 94       	dec	r14
 6ac:	e1 0e       	add	r14, r17
 6ae:	11 11       	cpse	r17, r1
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <nrfReadPayload+0x48>
 6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <nrfReadPayload+0x64>
 6b4:	00 e0       	ldi	r16, 0x00	; 0
 6b6:	e6 01       	movw	r28, r12
 6b8:	f1 2c       	mov	r15, r1
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	e8 1a       	sub	r14, r24
 6be:	f8 0a       	sbc	r15, r24
 6c0:	ec 0c       	add	r14, r12
 6c2:	fd 1c       	adc	r15, r13
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 6ca:	89 93       	st	Y+, r24
 6cc:	ec 16       	cp	r14, r28
 6ce:	fd 06       	cpc	r15, r29
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <nrfReadPayload+0x56>
 6d2:	00 23       	and	r16, r16
 6d4:	99 f0       	breq	.+38     	; 0x6fc <nrfReadPayload+0x8e>
 6d6:	c0 2f       	mov	r28, r16
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 6de:	c1 50       	subi	r28, 0x01	; 1
 6e0:	d9 f7       	brne	.-10     	; 0x6d8 <nrfReadPayload+0x6a>
 6e2:	0c c0       	rjmp	.+24     	; 0x6fc <nrfReadPayload+0x8e>
 6e4:	80 e2       	ldi	r24, 0x20	; 32
 6e6:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 6ea:	81 e6       	ldi	r24, 0x61	; 97
 6ec:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 6f0:	b8 2e       	mov	r11, r24
 6f2:	ee 24       	eor	r14, r14
 6f4:	ea 94       	dec	r14
 6f6:	e1 0e       	add	r14, r17
 6f8:	11 11       	cpse	r17, r1
 6fa:	dc cf       	rjmp	.-72     	; 0x6b4 <nrfReadPayload+0x46>
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 702:	8b 2d       	mov	r24, r11
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	ff 90       	pop	r15
 70e:	ef 90       	pop	r14
 710:	df 90       	pop	r13
 712:	cf 90       	pop	r12
 714:	bf 90       	pop	r11
 716:	08 95       	ret

00000718 <nrfRead>:
 718:	0e 94 37 03 	call	0x66e	; 0x66e <nrfReadPayload>
 71c:	87 e1       	ldi	r24, 0x17	; 23
 71e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 722:	81 70       	andi	r24, 0x01	; 1
 724:	08 95       	ret

00000726 <nrfFlushRx>:
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	c0 ea       	ldi	r28, 0xA0	; 160
 72e:	d6 e0       	ldi	r29, 0x06	; 6
 730:	10 e2       	ldi	r17, 0x20	; 32
 732:	1e 83       	std	Y+6, r17	; 0x06
 734:	82 ee       	ldi	r24, 0xE2	; 226
 736:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 73a:	1d 83       	std	Y+5, r17	; 0x05
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	08 95       	ret

00000744 <nrfFlushTx>:
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	c0 ea       	ldi	r28, 0xA0	; 160
 74c:	d6 e0       	ldi	r29, 0x06	; 6
 74e:	10 e2       	ldi	r17, 0x20	; 32
 750:	1e 83       	std	Y+6, r17	; 0x06
 752:	81 ee       	ldi	r24, 0xE1	; 225
 754:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 758:	1d 83       	std	Y+5, r17	; 0x05
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	08 95       	ret

00000762 <nrfStartListening>:
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 768:	81 fd       	sbrc	r24, 1
 76a:	0c c0       	rjmp	.+24     	; 0x784 <nrfStartListening+0x22>
 76c:	68 2f       	mov	r22, r24
 76e:	63 60       	ori	r22, 0x03	; 3
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 776:	8f e7       	ldi	r24, 0x7F	; 127
 778:	9e e3       	ldi	r25, 0x3E	; 62
 77a:	01 97       	sbiw	r24, 0x01	; 1
 77c:	f1 f7       	brne	.-4      	; 0x77a <nrfStartListening+0x18>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <nrfStartListening+0x1e>
 780:	00 00       	nop
 782:	05 c0       	rjmp	.+10     	; 0x78e <nrfStartListening+0x2c>
 784:	68 2f       	mov	r22, r24
 786:	61 60       	ori	r22, 0x01	; 1
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 78e:	8f e0       	ldi	r24, 0x0F	; 15
 790:	94 e0       	ldi	r25, 0x04	; 4
 792:	01 97       	sbiw	r24, 0x01	; 1
 794:	f1 f7       	brne	.-4      	; 0x792 <nrfStartListening+0x30>
 796:	00 c0       	rjmp	.+0      	; 0x798 <nrfStartListening+0x36>
 798:	00 00       	nop
 79a:	60 e7       	ldi	r22, 0x70	; 112
 79c:	87 e0       	ldi	r24, 0x07	; 7
 79e:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 7a2:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 7a6:	60 e2       	ldi	r22, 0x20	; 32
 7a8:	70 e2       	ldi	r23, 0x20	; 32
 7aa:	8a e0       	ldi	r24, 0x0A	; 10
 7ac:	0e 94 ef 02 	call	0x5de	; 0x5de <nrfWriteRegisterMulti>
 7b0:	0e 94 93 03 	call	0x726	; 0x726 <nrfFlushRx>
 7b4:	0e 94 a2 03 	call	0x744	; 0x744 <nrfFlushTx>
 7b8:	80 e8       	ldi	r24, 0x80	; 128
 7ba:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 7be:	8f e0       	ldi	r24, 0x0F	; 15
 7c0:	94 e0       	ldi	r25, 0x04	; 4
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <nrfStartListening+0x60>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <nrfStartListening+0x66>
 7c8:	00 00       	nop
 7ca:	08 95       	ret

000007cc <nrfWhatHappened>:
 7cc:	ef 92       	push	r14
 7ce:	ff 92       	push	r15
 7d0:	0f 93       	push	r16
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	7c 01       	movw	r14, r24
 7da:	8b 01       	movw	r16, r22
 7dc:	ea 01       	movw	r28, r20
 7de:	60 e7       	ldi	r22, 0x70	; 112
 7e0:	87 e0       	ldi	r24, 0x07	; 7
 7e2:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 7e6:	98 2f       	mov	r25, r24
 7e8:	90 72       	andi	r25, 0x20	; 32
 7ea:	f7 01       	movw	r30, r14
 7ec:	90 83       	st	Z, r25
 7ee:	98 2f       	mov	r25, r24
 7f0:	90 71       	andi	r25, 0x10	; 16
 7f2:	f8 01       	movw	r30, r16
 7f4:	90 83       	st	Z, r25
 7f6:	80 74       	andi	r24, 0x40	; 64
 7f8:	88 83       	st	Y, r24
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	08 95       	ret

00000808 <nrfOpenReadingPipe>:
 808:	0f 93       	push	r16
 80a:	1f 93       	push	r17
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	c8 2f       	mov	r28, r24
 812:	8b 01       	movw	r16, r22
 814:	81 11       	cpse	r24, r1
 816:	08 c0       	rjmp	.+16     	; 0x828 <nrfOpenReadingPipe+0x20>
 818:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e2       	ldi	r25, 0x20	; 32
 822:	0e 94 86 05 	call	0xb0c	; 0xb0c <memcpy>
 826:	04 c0       	rjmp	.+8      	; 0x830 <nrfOpenReadingPipe+0x28>
 828:	87 30       	cpi	r24, 0x07	; 7
 82a:	78 f5       	brcc	.+94     	; 0x88a <nrfOpenReadingPipe+0x82>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	58 f4       	brcc	.+22     	; 0x846 <nrfOpenReadingPipe+0x3e>
 830:	ec 2f       	mov	r30, r28
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	ea 5e       	subi	r30, 0xEA	; 234
 836:	ff 4d       	sbci	r31, 0xDF	; 223
 838:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <addr_width>
 83c:	b8 01       	movw	r22, r16
 83e:	80 81       	ld	r24, Z
 840:	0e 94 ef 02 	call	0x5de	; 0x5de <nrfWriteRegisterMulti>
 844:	08 c0       	rjmp	.+16     	; 0x856 <nrfOpenReadingPipe+0x4e>
 846:	e8 2f       	mov	r30, r24
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	ea 5e       	subi	r30, 0xEA	; 234
 84c:	ff 4d       	sbci	r31, 0xDF	; 223
 84e:	41 e0       	ldi	r20, 0x01	; 1
 850:	80 81       	ld	r24, Z
 852:	0e 94 ef 02 	call	0x5de	; 0x5de <nrfWriteRegisterMulti>
 856:	d0 e0       	ldi	r29, 0x00	; 0
 858:	fe 01       	movw	r30, r28
 85a:	e0 5f       	subi	r30, 0xF0	; 240
 85c:	ff 4d       	sbci	r31, 0xDF	; 223
 85e:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <fixed_payload_size>
 862:	80 81       	ld	r24, Z
 864:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 86e:	c6 5f       	subi	r28, 0xF6	; 246
 870:	df 4d       	sbci	r29, 0xDF	; 223
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	08 80       	ld	r0, Y
 878:	02 c0       	rjmp	.+4      	; 0x87e <nrfOpenReadingPipe+0x76>
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <nrfOpenReadingPipe+0x72>
 882:	68 2b       	or	r22, r24
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	1f 91       	pop	r17
 890:	0f 91       	pop	r16
 892:	08 95       	ret

00000894 <nrfToggleFeatures>:
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	c0 ea       	ldi	r28, 0xA0	; 160
 89c:	d6 e0       	ldi	r29, 0x06	; 6
 89e:	10 e2       	ldi	r17, 0x20	; 32
 8a0:	1e 83       	std	Y+6, r17	; 0x06
 8a2:	80 e5       	ldi	r24, 0x50	; 80
 8a4:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 8a8:	83 e7       	ldi	r24, 0x73	; 115
 8aa:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 8ae:	1d 83       	std	Y+5, r17	; 0x05
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	1f 91       	pop	r17
 8b6:	08 95       	ret

000008b8 <nrfEnableDynamicPayloads>:
 8b8:	8d e1       	ldi	r24, 0x1D	; 29
 8ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 8be:	68 2f       	mov	r22, r24
 8c0:	64 60       	ori	r22, 0x04	; 4
 8c2:	8d e1       	ldi	r24, 0x1D	; 29
 8c4:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 8c8:	8d e1       	ldi	r24, 0x1D	; 29
 8ca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 8ce:	81 11       	cpse	r24, r1
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <nrfEnableDynamicPayloads+0x2e>
 8d2:	0e 94 4a 04 	call	0x894	; 0x894 <nrfToggleFeatures>
 8d6:	8d e1       	ldi	r24, 0x1D	; 29
 8d8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 8dc:	68 2f       	mov	r22, r24
 8de:	64 60       	ori	r22, 0x04	; 4
 8e0:	8d e1       	ldi	r24, 0x1D	; 29
 8e2:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 8e6:	8c e1       	ldi	r24, 0x1C	; 28
 8e8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 8ec:	68 2f       	mov	r22, r24
 8ee:	6f 63       	ori	r22, 0x3F	; 63
 8f0:	8c e1       	ldi	r24, 0x1C	; 28
 8f2:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	80 93 25 20 	sts	0x2025, r24	; 0x802025 <dynamic_payloads_enabled>
 8fc:	08 95       	ret

000008fe <nrfGetDynamicPayloadSize>:
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	c0 ea       	ldi	r28, 0xA0	; 160
 906:	d6 e0       	ldi	r29, 0x06	; 6
 908:	10 e2       	ldi	r17, 0x20	; 32
 90a:	1e 83       	std	Y+6, r17	; 0x06
 90c:	80 e6       	ldi	r24, 0x60	; 96
 90e:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	0e 94 28 05 	call	0xa50	; 0xa50 <nrfspiTransfer>
 918:	1d 83       	std	Y+5, r17	; 0x05
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	08 95       	ret

00000922 <nrfSetChannel>:
 922:	88 23       	and	r24, r24
 924:	2c f0       	brlt	.+10     	; 0x930 <nrfSetChannel+0xe>
 926:	68 2f       	mov	r22, r24
 928:	85 e0       	ldi	r24, 0x05	; 5
 92a:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 92e:	08 95       	ret
 930:	6f e7       	ldi	r22, 0x7F	; 127
 932:	85 e0       	ldi	r24, 0x05	; 5
 934:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 938:	08 95       	ret

0000093a <nrfSetAutoAck>:
 93a:	88 23       	and	r24, r24
 93c:	29 f0       	breq	.+10     	; 0x948 <nrfSetAutoAck+0xe>
 93e:	6f e3       	ldi	r22, 0x3F	; 63
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 946:	08 95       	ret
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 950:	08 95       	ret

00000952 <nrfSetPALevel>:
 952:	cf 93       	push	r28
 954:	c8 2f       	mov	r28, r24
 956:	86 e0       	ldi	r24, 0x06	; 6
 958:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 95c:	89 7f       	andi	r24, 0xF9	; 249
 95e:	c6 70       	andi	r28, 0x06	; 6
 960:	68 2f       	mov	r22, r24
 962:	6c 2b       	or	r22, r28
 964:	86 e0       	ldi	r24, 0x06	; 6
 966:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <nrfSetDataRate>:
 96e:	cf 93       	push	r28
 970:	c8 2f       	mov	r28, r24
 972:	86 e0       	ldi	r24, 0x06	; 6
 974:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 978:	87 7d       	andi	r24, 0xD7	; 215
 97a:	9c 2f       	mov	r25, r28
 97c:	98 72       	andi	r25, 0x28	; 40
 97e:	68 2f       	mov	r22, r24
 980:	69 2b       	or	r22, r25
 982:	86 e0       	ldi	r24, 0x06	; 6
 984:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 988:	86 e0       	ldi	r24, 0x06	; 6
 98a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 98e:	91 e0       	ldi	r25, 0x01	; 1
 990:	c8 13       	cpse	r28, r24
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	89 2f       	mov	r24, r25
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <nrfSetCRCLength>:
 99a:	cf 93       	push	r28
 99c:	c8 2f       	mov	r28, r24
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <nrfReadRegister>
 9a4:	83 7f       	andi	r24, 0xF3	; 243
 9a6:	cc 70       	andi	r28, 0x0C	; 12
 9a8:	68 2f       	mov	r22, r24
 9aa:	6c 2b       	or	r22, r28
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <nrfSetRetries>:
 9b6:	68 2b       	or	r22, r24
 9b8:	84 e0       	ldi	r24, 0x04	; 4
 9ba:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 9be:	08 95       	ret

000009c0 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
 9c0:	60 e7       	ldi	r22, 0x70	; 112
 9c2:	87 e0       	ldi	r24, 0x07	; 7
 9c4:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
 9c8:	08 95       	ret

000009ca <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ca:	8f e3       	ldi	r24, 0x3F	; 63
 9cc:	9c e9       	ldi	r25, 0x9C	; 156
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	f1 f7       	brne	.-4      	; 0x9ce <nrfBegin+0x4>
 9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <nrfBegin+0xa>
 9d4:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
 9d6:	6f e5       	ldi	r22, 0x5F	; 95
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
 9de:	86 e0       	ldi	r24, 0x06	; 6
 9e0:	0e 94 a9 04 	call	0x952	; 0x952 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
 9e4:	80 e2       	ldi	r24, 0x20	; 32
 9e6:	0e 94 b7 04 	call	0x96e	; 0x96e <nrfSetDataRate>
 9ea:	88 23       	and	r24, r24
 9ec:	19 f0       	breq	.+6      	; 0x9f4 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	80 93 09 20 	sts	0x2009, r24	; 0x802009 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
 9f4:	80 e0       	ldi	r24, 0x00	; 0
 9f6:	0e 94 b7 04 	call	0x96e	; 0x96e <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
 9fa:	8c e0       	ldi	r24, 0x0C	; 12
 9fc:	0e 94 cd 04 	call	0x99a	; 0x99a <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	8c e1       	ldi	r24, 0x1C	; 28
 a04:	0e 94 1d 03 	call	0x63a	; 0x63a <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
 a08:	8c e4       	ldi	r24, 0x4C	; 76
 a0a:	0e 94 91 04 	call	0x922	; 0x922 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
 a0e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <nrfClearInterruptBits>
  nrfFlushRx();
 a12:	0e 94 93 03 	call	0x726	; 0x726 <nrfFlushRx>
  nrfFlushTx();
 a16:	0e 94 a2 03 	call	0x744	; 0x744 <nrfFlushTx>
 a1a:	08 95       	ret

00000a1c <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
 a1c:	e0 e4       	ldi	r30, 0x40	; 64
 a1e:	f6 e0       	ldi	r31, 0x06	; 6
 a20:	88 e0       	ldi	r24, 0x08	; 8
 a22:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
 a24:	84 e0       	ldi	r24, 0x04	; 4
 a26:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
 a28:	82 e0       	ldi	r24, 0x02	; 2
 a2a:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
 a2c:	e0 ea       	ldi	r30, 0xA0	; 160
 a2e:	f6 e0       	ldi	r31, 0x06	; 6
 a30:	80 e2       	ldi	r24, 0x20	; 32
 a32:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
 a34:	80 e4       	ldi	r24, 0x40	; 64
 a36:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
 a38:	80 e8       	ldi	r24, 0x80	; 128
 a3a:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 a3c:	e0 ea       	ldi	r30, 0xA0	; 160
 a3e:	f8 e0       	ldi	r31, 0x08	; 8
 a40:	88 e1       	ldi	r24, 0x18	; 24
 a42:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
 a44:	80 ec       	ldi	r24, 0xC0	; 192
 a46:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
 a48:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	86 83       	std	Z+6, r24	; 0x06
 a4e:	08 95       	ret

00000a50 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
 a50:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
 a54:	e0 ea       	ldi	r30, 0xA0	; 160
 a56:	f8 e0       	ldi	r31, 0x08	; 8
 a58:	81 81       	ldd	r24, Z+1	; 0x01
 a5a:	86 ff       	sbrs	r24, 6
 a5c:	fd cf       	rjmp	.-6      	; 0xa58 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
 a5e:	e0 ea       	ldi	r30, 0xA0	; 160
 a60:	f8 e0       	ldi	r31, 0x08	; 8
 a62:	81 81       	ldd	r24, Z+1	; 0x01
 a64:	80 64       	ori	r24, 0x40	; 64
 a66:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
 a68:	80 81       	ld	r24, Z
}
 a6a:	08 95       	ret

00000a6c <__divmodsi4>:
 a6c:	05 2e       	mov	r0, r21
 a6e:	97 fb       	bst	r25, 7
 a70:	1e f4       	brtc	.+6      	; 0xa78 <__divmodsi4+0xc>
 a72:	00 94       	com	r0
 a74:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__negsi2>
 a78:	57 fd       	sbrc	r21, 7
 a7a:	07 d0       	rcall	.+14     	; 0xa8a <__divmodsi4_neg2>
 a7c:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
 a80:	07 fc       	sbrc	r0, 7
 a82:	03 d0       	rcall	.+6      	; 0xa8a <__divmodsi4_neg2>
 a84:	4e f4       	brtc	.+18     	; 0xa98 <__divmodsi4_exit>
 a86:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__negsi2>

00000a8a <__divmodsi4_neg2>:
 a8a:	50 95       	com	r21
 a8c:	40 95       	com	r20
 a8e:	30 95       	com	r19
 a90:	21 95       	neg	r18
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	4f 4f       	sbci	r20, 0xFF	; 255
 a96:	5f 4f       	sbci	r21, 0xFF	; 255

00000a98 <__divmodsi4_exit>:
 a98:	08 95       	ret

00000a9a <__negsi2>:
 a9a:	90 95       	com	r25
 a9c:	80 95       	com	r24
 a9e:	70 95       	com	r23
 aa0:	61 95       	neg	r22
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__umulhisi3>:
 aaa:	a2 9f       	mul	r26, r18
 aac:	b0 01       	movw	r22, r0
 aae:	b3 9f       	mul	r27, r19
 ab0:	c0 01       	movw	r24, r0
 ab2:	a3 9f       	mul	r26, r19
 ab4:	70 0d       	add	r23, r0
 ab6:	81 1d       	adc	r24, r1
 ab8:	11 24       	eor	r1, r1
 aba:	91 1d       	adc	r25, r1
 abc:	b2 9f       	mul	r27, r18
 abe:	70 0d       	add	r23, r0
 ac0:	81 1d       	adc	r24, r1
 ac2:	11 24       	eor	r1, r1
 ac4:	91 1d       	adc	r25, r1
 ac6:	08 95       	ret

00000ac8 <__udivmodsi4>:
 ac8:	a1 e2       	ldi	r26, 0x21	; 33
 aca:	1a 2e       	mov	r1, r26
 acc:	aa 1b       	sub	r26, r26
 ace:	bb 1b       	sub	r27, r27
 ad0:	fd 01       	movw	r30, r26
 ad2:	0d c0       	rjmp	.+26     	; 0xaee <__udivmodsi4_ep>

00000ad4 <__udivmodsi4_loop>:
 ad4:	aa 1f       	adc	r26, r26
 ad6:	bb 1f       	adc	r27, r27
 ad8:	ee 1f       	adc	r30, r30
 ada:	ff 1f       	adc	r31, r31
 adc:	a2 17       	cp	r26, r18
 ade:	b3 07       	cpc	r27, r19
 ae0:	e4 07       	cpc	r30, r20
 ae2:	f5 07       	cpc	r31, r21
 ae4:	20 f0       	brcs	.+8      	; 0xaee <__udivmodsi4_ep>
 ae6:	a2 1b       	sub	r26, r18
 ae8:	b3 0b       	sbc	r27, r19
 aea:	e4 0b       	sbc	r30, r20
 aec:	f5 0b       	sbc	r31, r21

00000aee <__udivmodsi4_ep>:
 aee:	66 1f       	adc	r22, r22
 af0:	77 1f       	adc	r23, r23
 af2:	88 1f       	adc	r24, r24
 af4:	99 1f       	adc	r25, r25
 af6:	1a 94       	dec	r1
 af8:	69 f7       	brne	.-38     	; 0xad4 <__udivmodsi4_loop>
 afa:	60 95       	com	r22
 afc:	70 95       	com	r23
 afe:	80 95       	com	r24
 b00:	90 95       	com	r25
 b02:	9b 01       	movw	r18, r22
 b04:	ac 01       	movw	r20, r24
 b06:	bd 01       	movw	r22, r26
 b08:	cf 01       	movw	r24, r30
 b0a:	08 95       	ret

00000b0c <memcpy>:
 b0c:	fb 01       	movw	r30, r22
 b0e:	dc 01       	movw	r26, r24
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <memcpy+0xa>
 b12:	01 90       	ld	r0, Z+
 b14:	0d 92       	st	X+, r0
 b16:	41 50       	subi	r20, 0x01	; 1
 b18:	50 40       	sbci	r21, 0x00	; 0
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <memcpy+0x6>
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
